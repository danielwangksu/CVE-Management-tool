from sqlalchemy import create_engine
from sqlalchemy.sql import exists
from sqlalchemy import Table, Column, Integer, String
from sqlalchemy_utils import database_exists, create_database
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from cve_web_backend.logging import logger

Base = declarative_base()

class CVE(Base):

    __tablename__ = 'cve_table'

    id = Column(Integer, primary_key = True, autoincrement=True)
    cve_record = Column(String)
    status = Column(String)
    description = Column(String)
    package = Column(String)
    version = Column(String)
    scorev2 = Column(String)
    scorev3 = Column(String)
    vector = Column(String)
    link = Column(String)

    def __str__(self):
        return f'[CVE: {self.cve_record}, ' \
            f'package: {self.package}, ' \
            f'version: {self.version}, ' \
            f'status: {self.status}] '



class Database:

    def __init__(self):
        self.engine = create_engine("sqlite:///local.db", echo = True)
        if not database_exists(self.engine.url):
            logger.info('database does not exists, create one.')
            create_database(self.engine.url)
            Base.metadata.create_all(self.engine)
        else:
            logger.info('database exists connect to the database')
            self.conn = self.engine.connect()

    def start_session(self):
        DBSession = sessionmaker(bind = self.engine)
        self.session = DBSession()

    def close_session(self):
        if self.session is None:
            return
        self.session.close()

    def close_connection(self):
        self.conn.close()

    def is_empty(self):
        if self.session is None:
            self.start_session()
        if self.session.query(CVE).first() is None:
            return True
        return False

    def add_all_items(self, list):
        if self.session is None:
            self.start_session()
        if list is None or not isinstance(list[0], CVE):
            logger.error('the list is empty or wrong type')
            return
        self.session.add_all(list)
        self.session.commit()

    def add_item(self, item):
        if self.session is None:
            self.start_session()
        if item is None or not isinstance(item, CVE):
            logger.error('the item is None or wrong type')
            return
        try:
            self.session.add(item)
            self.session.commit()
        except:
            self.session.rollback()
            raise

    def is_item_exist(self, dic):
        if self.session is None:
            self.start_session()
        q = self.session.query(CVE.id).filter_by(cve_record=dic['CVE'], package=dic['PACKAGE NAME'], version=dic['PACKAGE VERSION'])
        result = self.session.query(q.exists()).scalar()
        return result

    def search_by_status(self, status):
        if self.session is None:
            self.start_session()
        result = self.session.query(CVE).filter_by(status=status).all()
        return result

    def update_to_patched(self, cve_record, package, version):
        ret = True
        if self.session is None:
            self.start_session()
        try:
            item = self.session.query(CVE).filter_by(cve_record=cve_record, package=package, version=version).first()
            if item.status == "Unpatched":
                item.status = "Patched"
                self.session.commit()
                logger.info("record: %s is updated as 'Patched'", item)
        except:
            self.session.rollback()
            ret = False
            raise
        finally:
            self.session.close()
        return ret

    def update_to_unpatched(self, cve_record, package, version):
        ret = True
        if self.session is None:
            self.start_session()
        try:
            item = self.session.query(CVE).filter_by(cve_record=cve_record, package=package, version=version).first()
            if item.status == "Patched":
                item.status = "Unpatched"
                self.session.commit()
                logger.info("record: %s is updated as 'Unpatched'", item)
        except:
            self.session.rollback()
            ret = False
            raise
        finally:
            self.session.close()
        return ret

    def delete_item(self, id, cve_record, package, version):
        ret = True
        if self.session is None:
            self.start_session()
        try:
            items = self.session.query(CVE).filter_by(id=id, cve_record=cve_record, package=package, version=version).all()
            num = self.session.query(CVE).filter_by(id=id, cve_record=cve_record, package=package, version=version).delete()
            self.session.commit()
            logger.info("%s record has been deleted", num)
            for item in items:
                logger.info("record: %s has been deleted", item)
        except:
            self.session.rollback()
            ret = False
            raise
        finally:
            self.session.close()
        return ret



def update_table_items(db, list):
    count = 0
    objectList = []
    for item in list:
        if not db.is_item_exist(item):
            cve = CVE(cve_record = item['CVE'], status = item['CVE STATUS'],
                description = item['CVE SUMMARY'], package = item['PACKAGE NAME'],
                version = item['PACKAGE VERSION'], scorev2 = item['CVSS v2 BASE SCORE'], 
                scorev3 = item['CVSS v3 BASE SCORE'], vector = item['VECTOR'],
                link = item['MORE INFORMATION']
            )
            db.add_item(item)
            count += 1
    logger.info(f"added {count} of new CVE records")
        

if __name__ == '__main__':
    database = Database()